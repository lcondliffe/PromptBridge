name: CI

on:
  push:
    branches: ["**"]
    tags: ["v*", "*.*.*"]
  pull_request:
    branches: ["**"]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  packages: write

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint_and_types:
    name: Check - Lint and Typecheck
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node (from .nvmrc)
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Lint
        run: pnpm lint

      - name: Typecheck
        run: pnpm exec tsc --noEmit

  e2e:
    name: Test - E2E (Playwright)
    runs-on: ubuntu-latest
    needs: [lint_and_types]
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: promptbridge
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d promptbridge" --health-interval=5s --health-timeout=5s --health-retries=20
    env:
      DATABASE_URL: postgresql://postgres:postgres@localhost:5432/promptbridge
      AUTH_URL: http://localhost:3000
      AUTH_TRUST_HOST: "true"
      AUTH_SECRET: testsecret
      NEXT_PUBLIC_API_BASE_URL: /api
      # Optional: set this in repo secrets to exercise real model fetching (not required)
      OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install pnpm
        run: npm install -g pnpm

      - name: Setup Node (from .nvmrc)
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright (Chromium only)
        run: npx playwright install --with-deps chromium

      - name: Run E2E tests
        run: pnpm test:e2e:ci

      - name: Upload Playwright report (HTML)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/

      - name: Upload Playwright raw test results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: test-results/

  security:
    name: Check - Security - SAST
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # let scanners see full history if needed

      - name: Gitleaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: detect --source . --no-git -v

      - name: Semgrep (non-blocking)
        uses: returntocorp/semgrep-action@v1
        with:
          config: p/ci
          generateSarif: "1"
        continue-on-error: true

      - name: Semgrep summary
        if: always()
        run: |
          if [ -f "semgrep.sarif" ]; then
            total=$(jq '[.runs[].results[]] | length' semgrep.sarif 2>/dev/null || echo 0)
            err=$(jq '[.runs[].results[] | select(.level=="error")] | length' semgrep.sarif 2>/dev/null || echo 0)
            warn=$(jq '[.runs[].results[] | select(.level=="warning")] | length' semgrep.sarif 2>/dev/null || echo 0)
            note=$(jq '[.runs[].results[] | select(.level=="note")] | length' semgrep.sarif 2>/dev/null || echo 0)
            {
              echo "Semgrep SAST"
              echo ""
              if [ "$total" -eq 0 ]; then
                echo "No findings detected âœ…"
              else
                echo "- Total findings: $total"
                echo "- Error: $err  Warning: $warn  Note: $note"
              fi
            } >> "$GITHUB_STEP_SUMMARY"
          else
            echo "Semgrep SARIF not found; no summary generated." >> "$GITHUB_STEP_SUMMARY"
          fi

      - name: Upload Semgrep SARIF
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: semgrep.sarif

  gitversion:
    name: Semantic Versioning
    runs-on: ubuntu-latest
    outputs:
      semVer: ${{ steps.gitversion.outputs.SemVer }}
      fullSemVer: ${{ steps.gitversion.outputs.FullSemVer }}
      majorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}
    steps:
      - name: Checkout (full)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup GitVersion
        uses: gittools/actions/gitversion/setup@v3
        with:
          versionSpec: '6.x'

      - name: Determine Version
        id: gitversion
        uses: gittools/actions/gitversion/execute@v3
        with:
          useConfigFile: true
          configFilePath: GitVersion.yml
          additionalArguments: '/verbosity diag'

      - name: Show computed version
        run: |
          echo "SemVer: ${{ steps.gitversion.outputs.SemVer }}"
          echo "FullSemVer: ${{ steps.gitversion.outputs.FullSemVer }}"
          echo "MajorMinorPatch: ${{ steps.gitversion.outputs.MajorMinorPatch }}"

  build_scan_and_push:
    name: Build - Docker Image
    runs-on: ubuntu-latest
    needs: [lint_and_types, security, gitversion]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute image name (lowercased)
        id: vars
        run: |
          echo "image=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_OUTPUT

      - name: Build image (local load for scanning)
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          load: true
          tags: ${{ steps.vars.outputs.image }}:${{ needs.gitversion.outputs.majorMinorPatch }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Trivy scan (fail on HIGH/CRITICAL)
        uses: aquasecurity/trivy-action@0.24.0
        with:
          image-ref: ${{ steps.vars.outputs.image }}:${{ needs.gitversion.outputs.majorMinorPatch }}
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

      - name: Log in to GHCR
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Docker meta (compute tags)
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.vars.outputs.image }}
          tags: |
            type=raw,value=${{ needs.gitversion.outputs.majorMinorPatch }}
            type=raw,value=latest,enable={{is_default_branch}}

      - name: "Build and push (multi-arch: amd64, arm64)"
        if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
